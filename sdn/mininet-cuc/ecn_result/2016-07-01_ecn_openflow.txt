使用 openflow 控制 ecn 策略 (外部命令 使用 python ecn_ovs_helper.py 控制 )


*** 结果分析


openflow ecn 策略比 drop 策略的效率更好. (TODO: red ecn 的策略没有 drop 好. Why? )


*** 测试函数 ( 这里使用我们自定义的的ovs-ofclt 进行控制 quick=True)
python ecn_topy.py
  ecn_test_case.test11_base(net, "TEST11-py-", duration=120)  # 独立测试TEST 11
python ecn_ovs_helper.py start [ecn | drop]
    start_opeflow_ecn(queue_min=?????, sleep_interval=0.0025, ecn_policy=ecn, quick=True)

*** 测试结果
 result ***
50000: 134.247 NO. 754 queue_min 50000 exceeded  (51476b 17p)
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    120.56      8.48 / 7.07 / 7.37
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1200 packets transmitted, 1200 received, 0% packet loss, time 121197ms
<h1>: rtt min/avg/max/mdev = 100.104/120.340/231.523/16.593 ms, pipe 3

6000: 122.778 NO. 329 queue_min 60000 exceeded  (60560b 20p)
(ecn_ovs_helper.py)
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1200 packets transmitted, 1200 received, 0% packet loss, time 121893ms
<h1>: rtt min/avg/max/mdev = 100.071/122.460/579.230/43.018 ms, pipe 6
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    129.82      6.95

*** 结果分析


openflow ecn 策略比 drop 策略的效率更好. (TODO: red ecn 的策略没有 drop 好. Why? )


*** 测试函数 ( 这里使用标准的ovs-ofclt 进行控制 quick=False)
python ecn_topy.py
  ecn_test_case.test11_base(net, "TEST11-py-", duration=120)  # 独立测试TEST 11
python ecn_ovs_helper.py start [ecn | drop]
    start_opeflow_ecn(queue_min=75000, sleep_interval=0.0025, ecn_policy=ecn, quick=False)

*** 测试结果
 result ***
py-75000-ecn 外部参数: start_opeflow_ecn(queue_min=75000, sleep_interval=0.0025, ecn_policy=True) # ecn
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1200 packets transmitted, 1200 received, 0% packet loss, time 121258ms
<h1>: rtt min/avg/max/mdev = 100.070/110.550/406.463/27.224 ms, pipe 4
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    122.34      6.31

*** 测试结果
 result ***
py-75000-drop 外部参数: start_opeflow_ecn(queue_min=75000, sleep_interval=0.0025, ecn_policy=False) # Drop
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1200 packets transmitted, 1200 received, 0% packet loss, time 121367ms
<h1>: rtt min/avg/max/mdev = 100.077/120.032/309.755/25.285 ms, pipe 4
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    124.00      4.60


*** 结果分析
这里看到队列不小的情况下, 延时已经不太好, 而链路利用率不够提高
说明是

*** 测试结果
 result ***
py-25000
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    180.97      8.53
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1800 packets transmitted, 1800 received, 0% packet loss, time 181671ms
<h1>: rtt min/avg/max/mdev = 100.112/137.008/344.179/25.161 ms, pipe 4

py-50000
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    180.63      8.91
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1800 packets transmitted, 1800 received, 0% packet loss, time 181438ms
<h1>: rtt min/avg/max/mdev = 100.128/139.084/227.173/19.244 ms, pipe 3

py-75000
<h1>: PING h3 (10.0.0.3) 56(84) bytes of data.
<h2>: MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to h3 () port 0 AF_INET : demo
<h2>: Recv   Send    Send
<h2>: Socket Socket  Message  Elapsed
<h2>: Size   Size    Size     Time     Throughput
<h2>: bytes  bytes   bytes    secs.    10^6bits/sec
<h2>:
<h2>: 87380  87380  87380    180.75      9.13
<h1>:
<h1>: --- h3 ping statistics ---
<h1>: 1800 packets transmitted, 1800 received, 0% packet loss, time 181467ms
<h1>: rtt min/avg/max/mdev = 100.097/138.488/197.263/19.738 ms, pipe 2
